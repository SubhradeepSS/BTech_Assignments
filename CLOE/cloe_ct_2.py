# -*- coding: utf-8 -*-
"""CLOE ct 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LFLttd8-9jcjYme5F5_PfrawzNxwV0KW

**ANOVA**
"""

observations = [
                [143, 141, 150, 146],
                [152, 149, 137, 143],
                [134, 136, 132, 127],
                [129, 127, 132, 129]
]
n = len(observations)
a = len(observations[0])

totals = [ sum(i) for i in observations ]
print(totals)

avg = [ i/n for i in totals ]
print(avg)

grand_total = sum(totals)
grand_mean = sum(avg)/a
print(grand_total, grand_mean)

SS_total = 0
print('SS_total = ')
for i in range(len(observations)):
  for j in range(len(observations[i])):
    SS_total += (observations[i][j] - grand_mean)**2
    print(f'({observations[i][j]} - {grand_mean})^2' + (f'\n= {SS_total}' if i==a-1 and j==n-1 else ' + '))

print('\nSS_treatment = ')
SS_treatment = 0
for i in avg:
  SS_treatment += n * (i-grand_mean)**2
  print(f'{n} * ({i}-{grand_mean})^2 + ')
print(f'= {SS_treatment}')

SS_err = SS_total - SS_treatment

print(f'\nSS_err = SS_total - SS_treatment = {SS_total} - {SS_treatment} = {SS_err}')

DOF_total = n*a - 1
DOF_treatment = a - 1
DOF_err = a*n - a

F_test = (SS_treatment/DOF_treatment) / (SS_err / DOF_err)
print(f'DOF_total = N - 1 = n*a - 1 = {n}*{a} - 1 = {DOF_total}')
print(f'DOF_treatment = a - 1 = {a} - 1 = {DOF_treatment}')
print(f'DOF_treatment = N - a = n*a - a = {n}*{a} - {a} = {DOF_err}')

print(f'F_test = (SS_treatment/DOF_treatment) / (SS_err / DOF_err) = ({SS_treatment}/{DOF_treatment}) / ({SS_err}/{DOF_err}) = {F_test}')

"""**Contrast**"""

C = [ 0, 0, 0, 1, -1 ] # [ mu_1, mu_2, ... ]

MS_err = SS_err / DOF_err

print('Summation of CiYi whole squared = (')
x = 0
for i in range(a):
  x += (C[i] * totals[i])
  print(f'({C[i]} * {totals[i]})' + (' + ' if i!=a-1 else f'\n)^2 = \n{x**2}'))

SS_c_numerator = x ** 2

y = 0
print('Summation of Ci squared = (')
for i in range(a):
  y += (C[i])**2
  print(f'{C[i]}^2' + (' + ' if i!=a-1 else f' ) =\n {y}'))

MS_c = SS_c_numerator / (n*y)
print(f'MS_c = SS_c / DOF_c = Summation of CiYi whole squared / (n * Summation of Ci squared) = {SS_c_numerator} / {n}*{y} = {SS_c_numerator / (n*y)}')

F_test = MS_c / MS_err
print(f'F_test = MS_c / MS_err = {MS_c} / {MS_err} = {F_test}')

"""**LSD**"""

for i in range(a):
  for j in range(i+1, a):
    print(f"y{i+1}_dot_bar - y{j+1}_dot_bar = {avg[i]} - {avg[j]} = {avg[i]-avg[j]}")

print(f"(N-a)root(2*MS_err/n) = ({n*a}-{a})root(2*{MS_err}/{n}) = {(n*a-a)*((2*MS_err / n)**(0.5))}")

"""**Randomized blocks**"""

data = [
        [70, 72, 80],
        [76, 84, 82],
        [82, 86, 84],
        [90, 92, 88]
]
a = len(data)
n = len(data[0])

totals_vertical = [ sum(i) for i in data ]
print(totals_vertical)

avg_vertical = [ i/n for i in totals_vertical ]
print(avg_vertical)

totals_horizontal = [ sum(i) for i in zip(*data) ]
print(totals_horizontal)

avg_horizontal = [ i/a for i in totals_horizontal ]
print(avg_horizontal)

grand_total = sum(totals_horizontal)
grand_mean = sum(avg_vertical)/a
print(grand_total, grand_mean)

# age group in class eg
SS_vertical = 0
print(f'SS_vertical = {n} * [')
for i in avg_vertical:
  SS_vertical += n * (i - grand_mean) ** 2
  print(f'({i} - {grand_mean})^2 + ')

print(f'] = {SS_vertical}')

# drugs
print(f'\nSS_horizontal = {a} * [')
SS_horizontal = 0
for i in avg_horizontal:
  SS_horizontal += a * (i - grand_mean) ** 2
  print(f'({i} - {grand_mean})^2 +')

print(f'] = {SS_horizontal}')

SS_total = 0
print('SS_total = ')
for i in range(len(data)):
  for j in range(len(data[i])):
    SS_total += (data[i][j] - grand_mean)**2
    print(f'({data[i][j]} - {grand_mean})^2 +')

print(f'= {SS_total}')

SS_err = SS_total - SS_horizontal - SS_vertical
print(f'\nSS_err = SS_total - SS_horizontal - SS_vertical = {SS_total} - {SS_horizontal} - {SS_vertical} = {SS_err}')

DOF_horizontal = n - 1
DOF_vertical = a - 1
DOF_err = (n-1) * (a-1)
DOF_total = n*a
print(f'DOF_horizontal = {n} - 1 = {DOF_horizontal}\nDOF_vertical = {a} - 1 = {DOF_vertical}\nDOF_err = {DOF_horizontal} * {DOF_vertical} = {DOF_err}\nDOF_total = {n} * {a} = {DOF_total}')

MS_horizontal = SS_horizontal / DOF_horizontal
MS_vertical = SS_vertical / DOF_vertical
MS_err = SS_err / DOF_err
print(f'MS_horizontal = {SS_horizontal} / {DOF_horizontal} = {MS_horizontal}\nMS_vertical = {SS_vertical} / {DOF_vertical} = {MS_vertical}\nMS_err = {SS_err} / {DOF_err} = {MS_err}')

F_test_vertical = MS_vertical / MS_err
F_test_horizontal = MS_horizontal / MS_err
print(f'F_test_vertical = {MS_vertical} / {MS_err} = {F_test_vertical}\nF_test_horizontal = {MS_horizontal} / {MS_err} = {F_test_horizontal}')

"""**Factorial Design**

2^2 design
"""

"""
A B AB
- - +
+ - -
- + -
+ + +
"""

signs = [
        [-1, -1, 1],
        [1, -1, -1],
        [-1, 1, -1],
        [1, 1, 1]
]

replicates = [
              [28, 25, 27],
              [36, 32, 32],
              [18, 19, 23],
              [31, 30, 29]
]

n = len(replicates[0])

totals = [ sum(i) for i in replicates ]
print(totals)

print("Factor\tContrast\tEffect\t\tSS")
contrast_A = 0
for i in range(len(totals)):
  contrast_A += signs[i][0] * totals[i]

effect_A = contrast_A / (2 * n)
SS_A = (contrast_A ** 2) / (4 * n)
print(f"A\t{contrast_A}\t{effect_A}\t{SS_A}")


contrast_B = 0
for i in range(len(totals)):
  contrast_B += signs[i][1] * totals[i]

effect_B = contrast_B / (2 * n)
SS_B = (contrast_B ** 2) / (4 * n)
print(f"B\t{contrast_B}\t{effect_B}\t{SS_B}")


contrast_AB = 0
for i in range(len(totals)):
  contrast_AB += signs[i][2] * totals[i]

effect_AB = contrast_AB / (2 * n)
SS_AB = (contrast_AB ** 2) / (4 * n)
print(f"AB\t{contrast_AB}\t{effect_AB}\t{SS_AB}")

avg = [ i/n for i in totals ]
print(avg)

grand_total = sum(totals)
grand_mean = sum(avg)/a
print(grand_total, grand_mean)

print('SS_total = ')
SS_total = 0
for i in range(len(replicates)):
  for j in range(len(replicates[i])):
    SS_total += (replicates[i][j] - grand_mean)**2
    print(f'({replicates[i][j]} - {grand_mean})^2 + ')

print(f'= {SS_total}')

SS_err = SS_total - SS_A - SS_B - SS_AB
print(f"\nSS_err = SS_total - SS_A - SS_B - SS_AB = {SS_total} - {SS_A} - {SS_B} - {SS_AB} = {SS_err}")

a = len(replicates)
DOF_err = n*a - a
DOF_total = n*a - 1
DOF_A = DOF_B = DOF_AB = 1
print(f"a = {len(replicates)}\nDOF_err = n*a - a = {n}*{a} - {a} = {DOF_err}\nDOF_total = n*a - 1 = {n}*{a} - 1 = {DOF_total}\nDOF_A = DOF_B = DOF_AB = 1")

MS_A = SS_A / DOF_A
print(f'MS_A = SS_A / DOF_A = {SS_A} / {DOF_A} = {MS_A}')

MS_B = SS_B / DOF_B
print(f'MS_B = SS_B / DOF_B = {SS_B} / {DOF_B} = {MS_B}')

MS_AB = SS_AB / DOF_AB
print(f'MS_AB = SS_AB / DOF_AB = {SS_AB} / {DOF_AB} = {MS_AB}')

MS_err = SS_err / DOF_err
print(f'MS_err = SS_err / DOF_err = {SS_err} / {DOF_err} = {MS_err}')

F_test_A = MS_A / MS_err
F_test_B = MS_B / MS_err
F_test_AB = MS_AB / MS_err

print(f'F_test_A = MS_A / MS_err = {MS_A} / {MS_err} = {F_test_A} \n F_test_B = MS_B / MS_err = {MS_B} / {MS_err} = {F_test_B} \n F_test_AB = MS_AB / MS_err = {MS_AB} / {MS_err} = {F_test_AB}')

extremes_A = [15, 25]
extremes_B = [1, 2]

print((extremes_A[0] + extremes_A[1])/2, (extremes_A[1] - extremes_A[0])/2)
print((extremes_B[0] + extremes_B[1])/2, (extremes_B[1] - extremes_B[0])/2)

F_stat = 5.31 # get from online

print("Model:")
print("y = beta0 + beta1 * A + beta2 * B + beta3 * AB")
print(f"y = {grand_mean} + {effect_A / 2 if F_test_A >= F_stat else 0} * A + {effect_B / 2 if F_test_B >= F_stat else 0} * B + {effect_AB / 2 if F_test_AB >= F_stat else 0} * AB")

print("Model after putting extreme limit points:")
print(f"y = {grand_mean} + {effect_A / 2 if F_test_A >= F_stat else 0} * (val_A - {(extremes_A[0] + extremes_A[1])/2})/{(extremes_A[1] - extremes_A[0])/2} + {effect_B / 2 if F_test_B >= F_stat else 0} * (val_B - {(extremes_B[1] + extremes_B[0])/2})/{(extremes_B[1] - extremes_B[0])/2} + {effect_AB / 2 if F_test_AB >= F_stat else 0} * AB")

"""2^3 design"""

level = 3
a = 2 ** level

signs = [
         [ 0 for j in range(a-1)]
         for i in range(a) 
]

for i in range(a):
  for j in range(level):
    if i & (1<<j):
      signs[i][j] = 1
    else:
      signs[i][j] = -1

  signs[i][3] = signs[i][0] * signs[i][1]
  signs[i][4] = signs[i][1] * signs[i][2]
  signs[i][5] = signs[i][0] * signs[i][2]
  signs[i][6] = signs[i][0] * signs[i][1] * signs[i][2]

print(signs)

contrasts = []
replicates = [
              [22, 31, 25],
              [32, 43, 29],
              [35, 34, 50],
              [44, 45, 38],
              [55, 47, 46],
              [60, 50, 54],
              [40, 37, 36],
              [39, 41, 47]
]
n = len(replicates[0])
totals = [ sum(i) for i in replicates]
avgs = [ i/n for i in totals ]

print(totals)
print(avgs)

for i in range(a-1):
  eff = 0
  for j in range(a):
    eff += signs[j][i] * totals[j]
  contrasts.append(eff)

print(contrasts)

effects = [ i/(4 * n) for i in contrasts ]
print(effects)

SS = [ (i**2)/(8 * len(replicates[0])) for i in contrasts ]
print(SS)

DOF_err = n*a - a
DOF_total = n*a - 1
print(f"n = {n}\na = {a}\nDOF_err = n*a - a = {n}*{a} - {a} = {DOF_err}\nDOF_total = n*a - 1 = {n}*{a} - 1 = {DOF_total}")

print('SS_total = ')
SS_total = 0
for i in range(a):
  for j in range(n):
    SS_total += (replicates[i][j] - grand_mean)**2
    print(f'({replicates[i][j]} - {grand_mean})^2 + ')

print(f'= {SS_total}')

SS_err = SS_total - sum(SS)
print(f"\nSS_err = SS_total - SS_A - SS_B - ... - SS_ABC = {SS_total} - {sum(SS)} = {SS_err}")

MS_err = SS_err / DOF_err
print(f'MS_err = SS_err / DOF_err = {SS_err} / {DOF_err} = {MS_err}')

F_test_contrasts = [ i / MS_err for i in SS ]
print(F_test_contrasts)

F_stat = 4.49399842 # from online calc

print("Model:")
betas = [ effects[i]/2 if F_test_contrasts[i] >= F_stat else 0 for i in range(len(effects)) ]
betas.insert(0, grand_mean)

print("Coefficients of model starting from beta0")
print(betas)

R_squared = sum(SS) / SS_total
print(R_squared)

"""Finding beta - matrix: Least Square method"""

x = [
     [1, -1, -1],
     [1, 1, -1],
     [1, -1, 1],
     [1, 1, 1]
]
y = [
     26.67, 33.33, 20, 30
]

import numpy as np

x_t = np.transpose(x)
a = np.dot(x_t, x)
print(a)

a_inv = np.linalg.inv(a)
print(a_inv)

b = np.dot(x_t, y)
print(b)

beta = np.dot(a_inv, b)
print(beta)

"""3^k"""

data = [
        [-1,0,1,-1,0,1,-1,0,1],
        [1,-2,1,1,-2,1,1,-2,1],
        [-1,-1,-1,0,0,0,1,1,1],
        [1,1,1,-2,-2,-2,1,1,1],
        [1,0,-1,0,0,0,-1,0,1],
        [-1,0,1,2,0,-2,-1,0,1],
        [-1,2,-1,0,0,0,1,-2,1],
        [1,-2,1,-2,4,-2,1,-2,1]
]
y = [
     4,-2,0,5,-4,1,8,-5,0
]

summation_ci_yi = np.dot(data, y)
print(summation_ci_yi)

SS = [
      summation_ci_yi[i]**2 / (sum(map(lambda z : z * z, data[i]))) for i in range(len(summation_ci_yi))
]
print(SS)

beta = [
        summation_ci_yi[i] / (sum(map(lambda z : z * z, data[i]))) for i in range(len(summation_ci_yi))
]
beta.insert(0, sum(y)/len(y))
print(beta)

