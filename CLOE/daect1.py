# -*- coding: utf-8 -*-
"""DAECT1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J084afATZVHGjv-iS1z7Mbo5nMZanavv
"""

import numpy as np

"""# Compartive T Test"""

data1 = np.array([45,38,52,48,25,39,51,46,55,46])
data2 = np.array([34,22,15,27,37,41,24,19,26,36])

n1 = data1.size
n2 = data2.size

x_1 = np.mean(data1)
x_2 = np.mean(data2)

alpha = 0.05
t_alpha = 2.100

print("X1","{0:.4f}".format(x_1))
print("x-x1 squared terms")
s1_sum = 0
for i in range(n1):
   print("{0:.4f}".format((x_1-data1[i])**2),end=" ")
   s1_sum += (x_1-data1[i])**2
print("\n\nS1 sum square term ","{0:.4f}".format(s1_sum))
s1_sq = s1_sum/(n1-1)
print("S1 squared ", "{0:.4f}".format(s1_sq))
s1 = s1_sq ** 0.5
print("S1 ","{0:.4f}".format(s1))

print("X2","{0:.4f}".format(x_2))
print("x-x2 squared terms")
s2_sum = 0
for i in range(n2):
   print("{0:.4f}".format((x_2-data2[i])**2),end=" ")
   s2_sum += (x_2-data2[i])**2
print("\n\nS2 sum square term ","{0:.4f}".format(s2_sum))
s2_sq = s2_sum/(n2-1)
print("S2 squared ", "{0:.4f}".format(s2_sq))
s2 = s2_sq ** 0.5
print("S2 ","{0:.4f}".format(s2))

print("\nSp squared = ","{0:.4f}".format((s1_sq*(n1-1)))," + ","{0:.4f}".format((s2_sq*(n2-1))))
sp2 = s1_sq*(n1-1) + s2_sq*(n2-1)
sp2 /= (n1+n2-2)
print("Sp2","{0:.4f}".format(sp2))
sp = sp2**0.5

print("Sp",sp)

print("\nT0 = \n","{0:.4f}".format(x_1)," - ","{0:.4f}".format(x_2))
print("----------------------------------------------")
print("{0:.4f}".format(sp)," * sqrt(","{0:.4f}".format(1/n1)," + ","{0:.4f}".format(1/n2)," = ","{0:.4f}".format(1/n1+1/n2),")")

x_diff = x_1-x_2
print("=\n","{0:.5f}".format(x_diff))
print("-----------------------------")
print("{0:.4f}".format(sp)," * ","{0:.4f}".format((1/n1+1/n2)**0.5), " = " , ("{0:.4f}".format(sp*((1/n1+1/n2)**0.5))))

print("=" ,"{0:.4f}".format((x_diff/(sp*((1/n1+1/n2)**0.5)))))

"""## t test single"""

data = np.array([108,124,124,106,115,138,163,159,134,139])
n = data.size

#enter mu
mu = 120

x_mean = np.mean(data)
print("Mean in ",x_mean)

s_sum = 0
for i in range(n1):
   print("{0:.4f}".format((x_mean-data[i])**2),end=" ")
   s_sum += (x_mean-data[i])**2
print("\n\nS sum square term ","{0:.4f}".format(s_sum))

s_sq = s_sum / (n-1);
print("S squared is","{0:.4f}".format(s_sq));
s = s_sq**0.5
print("S is","{0:.4f}".format(s))

print("\nT = \n","{0:.4f}".format(x_mean)," - ","{0:.4f}".format(mu))
print("----------------------------------------------")
print("{0:.4f}".format(s)," * sqrt(","{0:.4f}".format(1/n),")")

x_diff = x_mean-mu
print("=\n","{0:.5f}".format(x_diff))
print("-----------------------------")
print("{0:.4f}".format(s)," * ","{0:.4f}".format((1/n)**0.5),"=","{0:.4f}".format(s*((1/n)**0.5)))

print("=" ,"{0:.4f}".format((x_diff/(s*((1/n)**0.5)))))

"""# Compartive Z Test"""

data1 = np.array([16.03,16.01,16.04,15.96,16.05,15.98,16.05,16.02,16.02,15.99])
data2 = np.array([16.02,16.03,15.97,16.04,15.96,16.02,16.01,16.01,15.99,16.00])

n1 = data1.size
n2 = data2.size

x_1 = np.mean(data1)
x_2 = np.mean(data2)

sd1 = 0.015
sd2 = 0.018

print("X1","{0:.6f}".format(x_1))
print("X2","{0:.6f}".format(x_2))

print("Denominator")
print("{0:.6f}".format(sd1**2),"/",n1," + ","{0:.6f}".format(sd2**2),"/",n2)
print("{0:.6f}".format((sd1**2)/n1)," + ","{0:.6f}".format((sd2**2)/n2))
print("{0:.6f}".format((sd1**2)/n1+(sd2**2)/n2))
s = (sd1**2)/n1+(sd2**2)/n2
print("denom = ","{0:.6f}".format(s**0.5))
print("\nAns")
print("{0:.4f}".format(x_1-x_2),"/","{0:.6f}".format(s**0.5))
print("{0:.6f}".format((x_1-x_2)/((s**0.5))))

"""#Single Z"""

data = np.array([69,79,89,99,109])
n = data.size

mu = 100
sd = 15.81

x = np.mean(data)
print("Mean  = ",x)
print("denom = ",sd,"/",n**0.5, " = ",sd/(n**0.5))
ans = (x-mu)/(sd*((1/n)**0.5))
print("Ans = ", x-mu, ("/ denom = ") ,ans)

"""## Sum of Sqaures"""

data = np.array([69,79,89,99,109])
n = data.size

x_mean = np.mean(data)
print("Mean is ",x_mean)

s_sum = 0
for i in range(n):
  print("{0:.4f}".format((x_mean-data[i])**2),end=" ")
  s_sum += (x_mean-data[i])**2
print("\n\nS sum square term ","{0:.4f}".format(s_sum))